diff --git a/node_modules/@uniswap/smart-order-router/build/main/routers/alpha-router/functions/get-candidate-pools.js b/node_modules/@uniswap/smart-order-router/build/main/routers/alpha-router/functions/get-candidate-pools.js
index 73dd82c..8bc6a16 100644
--- a/node_modules/@uniswap/smart-order-router/build/main/routers/alpha-router/functions/get-candidate-pools.js
+++ b/node_modules/@uniswap/smart-order-router/build/main/routers/alpha-router/functions/get-candidate-pools.js
@@ -8,7 +8,6 @@ const router_sdk_1 = require("@uniswap/router-sdk");
 const sdk_core_1 = require("@uniswap/sdk-core");
 const v3_sdk_1 = require("@uniswap/v3-sdk");
 const lodash_1 = __importDefault(require("lodash"));
-const providers_1 = require("../../../providers");
 const token_provider_1 = require("../../../providers/token-provider");
 const util_1 = require("../../../util");
 const amounts_1 = require("../../../util/amounts");
@@ -37,10 +36,10 @@ const baseTokensByChain = {
         token_provider_1.WBTC_OPTIMISM_GOERLI,
     ],
     [sdk_core_1.ChainId.OPTIMISM_SEPOLIA]: [
-        providers_1.DAI_OPTIMISM_SEPOLIA,
-        providers_1.USDC_OPTIMISM_SEPOLIA,
-        providers_1.USDT_OPTIMISM_SEPOLIA,
-        providers_1.WBTC_OPTIMISM_SEPOLIA,
+        token_provider_1.DAI_OPTIMISM_SEPOLIA,
+        token_provider_1.USDC_OPTIMISM_SEPOLIA,
+        token_provider_1.USDT_OPTIMISM_SEPOLIA,
+        token_provider_1.WBTC_OPTIMISM_SEPOLIA,
     ],
     [sdk_core_1.ChainId.ARBITRUM_ONE]: [
         token_provider_1.DAI_ARBITRUM,
@@ -49,7 +48,7 @@ const baseTokensByChain = {
         token_provider_1.USDT_ARBITRUM,
     ],
     [sdk_core_1.ChainId.ARBITRUM_GOERLI]: [token_provider_1.USDC_ARBITRUM_GOERLI],
-    [sdk_core_1.ChainId.ARBITRUM_SEPOLIA]: [providers_1.USDC_ARBITRUM_SEPOLIA],
+    [sdk_core_1.ChainId.ARBITRUM_SEPOLIA]: [token_provider_1.USDC_ARBITRUM_SEPOLIA],
     [sdk_core_1.ChainId.POLYGON]: [token_provider_1.USDC_POLYGON, token_provider_1.WMATIC_POLYGON],
     [sdk_core_1.ChainId.POLYGON_MUMBAI]: [token_provider_1.DAI_POLYGON_MUMBAI, token_provider_1.WMATIC_POLYGON_MUMBAI],
     [sdk_core_1.ChainId.CELO]: [token_provider_1.CUSD_CELO, token_provider_1.CEUR_CELO, token_provider_1.CELO],
diff --git a/node_modules/@uniswap/smart-order-router/build/main/util/gas-factory-helpers.js b/node_modules/@uniswap/smart-order-router/build/main/util/gas-factory-helpers.js
index ba47cc7..060f14d 100644
--- a/node_modules/@uniswap/smart-order-router/build/main/util/gas-factory-helpers.js
+++ b/node_modules/@uniswap/smart-order-router/build/main/util/gas-factory-helpers.js
@@ -8,7 +8,7 @@ const bignumber_1 = require("@ethersproject/bignumber");
 const router_sdk_1 = require("@uniswap/router-sdk");
 const sdk_core_1 = require("@uniswap/sdk-core");
 const v3_sdk_1 = require("@uniswap/v3-sdk");
-const brotli_1 = __importDefault(require("brotli"));
+// const brotli_1 = __importDefault(require("brotli"));
 const jsbi_1 = __importDefault(require("jsbi"));
 const lodash_1 = __importDefault(require("lodash"));
 const routers_1 = require("../routers");
@@ -124,19 +124,19 @@ function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {
 }
 exports.getGasCostInNativeCurrency = getGasCostInNativeCurrency;
 function getArbitrumBytes(data) {
-    if (data == '')
-        return bignumber_1.BigNumber.from(0);
-    const compressed = brotli_1.default.compress(Buffer.from(data.replace('0x', ''), 'hex'), {
-        mode: 0,
-        quality: 1,
-        lgwin: 22,
-    });
-    // TODO: This is a rough estimate of the compressed size
-    // Brotli 0 should be used, but this brotli library doesn't support it
-    // https://github.com/foliojs/brotli.js/issues/38
-    // There are other brotli libraries that do support it, but require async
-    // We workaround by using Brotli 1 with a 20% bump in size
-    return bignumber_1.BigNumber.from(compressed.length).mul(120).div(100);
+    // if (data == '')
+    //     return bignumber_1.BigNumber.from(0);
+    // const compressed = brotli_1.default.compress(Buffer.from(data.replace('0x', ''), 'hex'), {
+    //     mode: 0,
+    //     quality: 1,
+    //     lgwin: 22,
+    // });
+    // // TODO: This is a rough estimate of the compressed size
+    // // Brotli 0 should be used, but this brotli library doesn't support it
+    // // https://github.com/foliojs/brotli.js/issues/38
+    // // There are other brotli libraries that do support it, but require async
+    // // We workaround by using Brotli 1 with a 20% bump in size
+    // return bignumber_1.BigNumber.from(compressed.length).mul(120).div(100);
 }
 exports.getArbitrumBytes = getArbitrumBytes;
 function calculateArbitrumToL1FeeFromCalldata(calldata, gasData, chainId) {
diff --git a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
index dded08f..7abf060 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/routers/alpha-router/functions/get-candidate-pools.js
@@ -2,12 +2,11 @@ import { Protocol } from '@uniswap/router-sdk';
 import { ChainId, TradeType } from '@uniswap/sdk-core';
 import { FeeAmount } from '@uniswap/v3-sdk';
 import _ from 'lodash';
-import { DAI_OPTIMISM_SEPOLIA, USDC_ARBITRUM_SEPOLIA, USDC_OPTIMISM_SEPOLIA, USDT_OPTIMISM_SEPOLIA, WBTC_OPTIMISM_SEPOLIA } from '../../../providers';
-import { CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, FEI_MAINNET, USDB_BLAST, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS, } from '../../../providers/token-provider';
-import { unparseFeeAmount, WRAPPED_NATIVE_CURRENCY } from '../../../util';
+import { CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_AVAX, DAI_BNB, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISM_GOERLI, DAI_OPTIMISM_SEPOLIA, DAI_POLYGON_MUMBAI, DAI_SEPOLIA, FEI_MAINNET, USDB_BLAST, USDC_ARBITRUM, USDC_ARBITRUM_GOERLI, USDC_ARBITRUM_SEPOLIA, USDC_AVAX, USDC_BASE, USDC_BNB, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISM_GOERLI, USDC_OPTIMISM_SEPOLIA, USDC_POLYGON, USDC_SEPOLIA, USDT_ARBITRUM, USDT_BNB, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISM_GOERLI, USDT_OPTIMISM_SEPOLIA, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISM_GOERLI, WBTC_OPTIMISM_SEPOLIA, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS, } from '../../../providers/token-provider';
+import { WRAPPED_NATIVE_CURRENCY, unparseFeeAmount } from '../../../util';
 import { parseFeeAmount } from '../../../util/amounts';
 import { log } from '../../../util/log';
-import { metric, MetricLoggerUnit } from '../../../util/metric';
+import { MetricLoggerUnit, metric } from '../../../util/metric';
 const baseTokensByChain = {
     [ChainId.MAINNET]: [
         USDC_MAINNET,
diff --git a/node_modules/@uniswap/smart-order-router/build/module/util/gas-factory-helpers.js b/node_modules/@uniswap/smart-order-router/build/module/util/gas-factory-helpers.js
index 172c942..1add700 100644
--- a/node_modules/@uniswap/smart-order-router/build/module/util/gas-factory-helpers.js
+++ b/node_modules/@uniswap/smart-order-router/build/module/util/gas-factory-helpers.js
@@ -1,15 +1,14 @@
+import { estimateL1Gas, estimateL1GasCost } from '@eth-optimism/sdk';
 import { BigNumber } from '@ethersproject/bignumber';
 import { Protocol } from '@uniswap/router-sdk';
 import { ChainId, Percent, Token, TradeType } from '@uniswap/sdk-core';
 import { FeeAmount } from '@uniswap/v3-sdk';
-import brotli from 'brotli';
 import JSBI from 'jsbi';
 import _ from 'lodash';
-import { getQuoteThroughNativePool, MixedRouteWithValidQuote, SwapType, usdGasTokensByChain, V2RouteWithValidQuote, V3RouteWithValidQuote, } from '../routers';
-import { CurrencyAmount, log, WRAPPED_NATIVE_CURRENCY } from '../util';
+import { MixedRouteWithValidQuote, SwapType, V2RouteWithValidQuote, V3RouteWithValidQuote, getQuoteThroughNativePool, usdGasTokensByChain, } from '../routers';
+import { CurrencyAmount, WRAPPED_NATIVE_CURRENCY, log } from '../util';
 import { opStackChains } from './l2FeeChains';
 import { buildSwapMethodParameters, buildTrade } from './methodParameters';
-import { estimateL1Gas, estimateL1GasCost } from '@eth-optimism/sdk';
 export async function getV2NativePool(token, poolProvider, providerConfig) {
     const chainId = token.chainId;
     const weth = WRAPPED_NATIVE_CURRENCY[chainId];
@@ -114,19 +113,19 @@ export function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {
     return costNativeCurrency;
 }
 export function getArbitrumBytes(data) {
-    if (data == '')
-        return BigNumber.from(0);
-    const compressed = brotli.compress(Buffer.from(data.replace('0x', ''), 'hex'), {
-        mode: 0,
-        quality: 1,
-        lgwin: 22,
-    });
-    // TODO: This is a rough estimate of the compressed size
-    // Brotli 0 should be used, but this brotli library doesn't support it
-    // https://github.com/foliojs/brotli.js/issues/38
-    // There are other brotli libraries that do support it, but require async
-    // We workaround by using Brotli 1 with a 20% bump in size
-    return BigNumber.from(compressed.length).mul(120).div(100);
+    // if (data == '')
+    //     return BigNumber.from(0);
+    // const compressed = brotli.compress(Buffer.from(data.replace('0x', ''), 'hex'), {
+    //     mode: 0,
+    //     quality: 1,
+    //     lgwin: 22,
+    // });
+    // // TODO: This is a rough estimate of the compressed size
+    // // Brotli 0 should be used, but this brotli library doesn't support it
+    // // https://github.com/foliojs/brotli.js/issues/38
+    // // There are other brotli libraries that do support it, but require async
+    // // We workaround by using Brotli 1 with a 20% bump in size
+    // return BigNumber.from(compressed.length).mul(120).div(100);
 }
 export function calculateArbitrumToL1FeeFromCalldata(calldata, gasData, chainId) {
     const { perL2TxFee, perL1CalldataFee, perArbGasTotal } = gasData;
